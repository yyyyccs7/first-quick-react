{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Banner","title","buttonColor","selected","TermSelector","state","Group","hasAddons","Object","values","terms","map","value","key","color","term","onClick","setTerm","CourseList","courses","useState","useSelection","toggle","termCourses","filter","course","getCourseTerm","Fragment","id","F","W","S","charAt","Course","includes","disabled","hasConflict","slice","getCourseNumber","some","selection","courseConflict","setSelected","x","y","concat","addCourseTimes","timeParts","meets","addScheduleTimes","schedule","meetsPat","days","exec","match","hh1","mm1","hh2","mm2","hours","start","end","timeConflict","course1","course2","days1","days2","day","hours1","hours2","Math","max","min","App","setSchedule","useEffect","a","fetch","response","ok","json","fetchSchedule","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff980c24.chunk.js","sourcesContent":["import React from 'react';\nimport 'rbx/index.css';\nimport { Button, Container, Title } from 'rbx';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDZYzgHjcbC5iZyCXGeopK6tuR2kKVW1Fs\",\n  authDomain: \"first-quick-react.firebaseapp.com\",\n  databaseURL: \"https://first-quick-react.firebaseio.com\",\n  projectId: \"first-quick-react\",\n  storageBucket: \"first-quick-react.appspot.com\",\n  messagingSenderId: \"451507045047\",\n  appId: \"1:451507045047:web:fc1311e5d080d2c3af4332\",\n  measurementId: \"G-F4H6JTV8S3\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n\nconst schedule = {\n  \"title\": \"CS Courses for 2018-2019\",\n  \"courses\": [\n    {\n      \"id\": \"F101\",\n      \"title\": \"Computer Science: Concepts, Philosophy, and Connections\",\n      \"meets\": \"MWF 11:00-11:50\"\n    },\n    {\n      \"id\": \"F110\",\n      \"title\": \"Intro Programming for non-majors\",\n      \"meets\": \"MWF 10:00-10:50\"\n    },\n    {\n      \"id\": \"F111\",\n      \"title\": \"Fundamentals of Computer Programming I\",\n      \"meets\": \"MWF 13:00-13:50\"\n    },\n    {\n      \"id\": \"F211\",\n      \"title\": \"Fundamentals of Computer Programming II\",\n      \"meets\": \"TuTh 12:30-13:50\"\n    }\n  ]\n};\n\nconst Banner = ({ title }) => (\n  <Title>{ title || '[loading...]' }</Title>\n);\n\nconst buttonColor = selected => (\n  selected ? 'success' : null\n);\n\nconst TermSelector = ({ state }) => (\n  <Button.Group hasAddons>\n  { Object.values(terms)\n      .map(value => \n        <Button key={value}\n          color={ buttonColor(value === state.term) }\n          onClick={ () => state.setTerm(value) }\n          >\n          { value }\n        </Button>\n      )\n  }\n  </Button.Group>\n);\n\nconst CourseList = ({ courses }) => {\n  const [term, setTerm] = useState('Fall');\n  const [selected, toggle] = useSelection();\n  const termCourses = courses.filter(course => term === getCourseTerm(course));\n \n  return (\n    <React.Fragment>\n      <TermSelector state={ { term, setTerm } } />\n      <Button.Group>\n        { termCourses.map(course => <Course key={ course.id } course={ course } state={ { selected, toggle } } />) }\n      </Button.Group>\n    </React.Fragment>\n  );\n};\n\nconst terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\n\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst getCourseNumber = course => (\n  course.id.slice(1, 4)\n);\n\nconst Course = ({ course, state }) => (\n  <Button color={ buttonColor(state.selected.includes(course)) }\n    onClick={ () => state.toggle(course) }\n    disabled={ hasConflict(course, state.selected) }\n    >\n    { getCourseTerm(course) } CS { getCourseNumber(course) }: { course.title }\n  </Button>\n);\n\nconst hasConflict = (course, selected) => (\n  selected.some(selection => courseConflict(course, selection))\n);\n\nconst useSelection = () => {\n  const [selected, setSelected] = useState([]);\n  const toggle = (x) => {\n    setSelected(selected.includes(x) ? selected.filter(y => y !== x) : [x].concat(selected))\n  };\n  return [ selected, toggle ];\n};\n\nconst addCourseTimes = course => ({\n  ...course,\n  ...timeParts(course.meets)\n});\n\nconst addScheduleTimes = schedule => ({\n  title: schedule.title,\n  courses: schedule.courses.map(addCourseTimes)\n});\n\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\nconst days = ['M', 'Tu', 'W', 'Th', 'F'];\n\nconst timeParts = meets => {\n  const [match, days, hh1, mm1, hh2, mm2] = meetsPat.exec(meets) || [];\n  return !match ? {} : {\n    days,\n    hours: {\n      start: hh1 * 60 + mm1 * 1,\n      end: hh2 * 60 + mm2 * 1\n    }\n  };\n};\n\nconst daysOverlap = (days1, days2) => ( \n  days.some(day => days1.includes(day) && days2.includes(day))\n);\n\nconst hoursOverlap = (hours1, hours2) => (\n  Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\n);\n\nconst timeConflict = (course1, course2) => (\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\n);\n\nconst courseConflict = (course1, course2) => (\n  course1 !== course2\n  && getCourseTerm(course1) === getCourseTerm(course2)\n  && timeConflict(course1, course2)\n);\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({ title: '', courses: [] });\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\n\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setSchedule(addScheduleTimes(json));\n    }\n    fetchSchedule();\n  }, [])\n\n  return (\n    <Container>\n      <Banner title={ schedule.title } />\n      <CourseList courses={ schedule.courses } />\n    </Container>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}