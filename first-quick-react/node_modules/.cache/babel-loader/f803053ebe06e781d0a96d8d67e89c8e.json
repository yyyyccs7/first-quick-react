{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport { DEFAULTS } from \"./variables\";\nexport const makePropTypesFactory = makePropTypes => variables => makePropTypes(Object.assign({}, DEFAULTS, variables));\nexport const makeValidatingTransformFactory = (makePropTypesFunc, transformFunc) => (variables = DEFAULTS) => {\n  const propTypes = makePropTypesFunc(variables);\n  return (props, componentName, location = \"prop\") => {\n    PropTypes.checkPropTypes(propTypes, props, location, componentName);\n    return transformFunc(props);\n  };\n};\nexport const makeRootValidatingTransformFactory = (...mvtfs) => variables => {\n  const vtfs = mvtfs.map(func => func(Object.assign({}, DEFAULTS, variables)));\n  return (props, componentName, location = \"prop\") => vtfs.reduce((acc, vtf) => vtf(acc, componentName, location), props);\n};","map":{"version":3,"sources":["../../../src/base/helpers/factory.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,YAAtB;AAGA,SAAS,QAAT,QAA+C,aAA/C;AAYA,OAAO,MAAM,oBAAoB,GAAiC,aAAa,IAAI,SAAS,IAC1F,aAAa,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,QAAN,EAAmB,SAAnB,CAAA,CADR;AAgCP,OAAO,MAAM,8BAA8B,GAAG,CAI5C,iBAJ4C,EAK5C,aAL4C,KAMoB,CAChE,SAAS,GAAG,QADoD,KAEL;AAC3D,QAAM,SAAS,GAAG,iBAAiB,CAAC,SAAD,CAAnC;AAEA,SAAO,CAAC,KAAD,EAAQ,aAAR,EAAuB,QAAQ,GAAG,MAAlC,KAA4C;AACjD,IAAA,SAAS,CAAC,cAAV,CAAyB,SAAzB,EAAoC,KAApC,EAA2C,QAA3C,EAAqD,aAArD;AACA,WAAO,aAAa,CAAC,KAAD,CAApB;AACD,GAHD;AAID,CAfM;AA6BP,OAAO,MAAM,kCAAkC,GAAG,CAIhD,GAAG,KAJ6C,KAK5C,SAAD,IAA6C;AAChD,QAAM,IAAI,GAAG,KAAK,CAAC,GAAN,CAAU,IAAI,IAAI,IAAI,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,QAAN,EAAmB,SAAnB,CAAA,CAAtB,CAAb;AACA,SAAO,CAKL,KALK,EAML,aANK,EAOL,QAAA,GAAmB,MAPd,KAYL,IAAI,CAAC,MAAL,CAAY,CAAC,GAAD,EAAM,GAAN,KAAc,GAAG,CAAC,GAAD,EAAM,aAAN,EAAqB,QAArB,CAA7B,EAA6D,KAA7D,CAZF;AAaD,CApBM","sourceRoot":"","sourcesContent":["import PropTypes from \"prop-types\";\nimport { DEFAULTS } from \"./variables\";\nexport const makePropTypesFactory = makePropTypes => variables => makePropTypes(Object.assign({}, DEFAULTS, variables));\nexport const makeValidatingTransformFactory = (makePropTypesFunc, transformFunc) => (variables = DEFAULTS) => {\n    const propTypes = makePropTypesFunc(variables);\n    return (props, componentName, location = \"prop\") => {\n        PropTypes.checkPropTypes(propTypes, props, location, componentName);\n        return transformFunc(props);\n    };\n};\nexport const makeRootValidatingTransformFactory = (...mvtfs) => (variables) => {\n    const vtfs = mvtfs.map(func => func(Object.assign({}, DEFAULTS, variables)));\n    return (props, componentName, location = \"prop\") => vtfs.reduce((acc, vtf) => vtf(acc, componentName, location), props);\n};\n//# sourceMappingURL=factory.js.map"]},"metadata":{},"sourceType":"module"}