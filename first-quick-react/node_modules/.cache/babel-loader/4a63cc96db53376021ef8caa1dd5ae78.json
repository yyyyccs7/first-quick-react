{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  tooltipActive: PropTypes.bool,\n  tooltipColor: PropTypes.oneOf(vars.colors),\n  tooltipMultiline: PropTypes.bool,\n  tooltipPosition: PropTypes.oneOf(vars.tooltipPositions),\n  tooltipResponsive: PropTypes.objectOf(PropTypes.oneOf(vars.tooltipPositions))\n}));\nexport const transform = props => {\n  const {\n    className,\n    tooltip,\n    tooltipActive,\n    tooltipColor,\n    tooltipMultiline,\n    tooltipPosition,\n    tooltipResponsive = {}\n  } = props,\n        rest = tslib_1.__rest(props, [\"className\", \"tooltip\", \"tooltipActive\", \"tooltipColor\", \"tooltipMultiline\", \"tooltipPosition\", \"tooltipResponsive\"]);\n\n  return Object.assign({\n    className: classNames({\n      \"is-tooltip-active\": tooltipActive,\n      [`is-tooltip-${tooltipColor}`]: tooltipColor,\n      \"is-tooltip-multiline\": tooltipMultiline,\n      [`is-tooltip-${tooltipPosition}`]: tooltipPosition,\n      tooltip\n    }, ...Object.keys(tooltipResponsive).map(breakpoint => `is-tooltip-${tooltipResponsive[breakpoint]}-${breakpoint}`), className)\n  }, tooltip !== undefined ? {\n    \"data-tooltip\": tooltip\n  } : {}, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":{"version":3,"sources":["../../../src/base/helpers/tooltip.ts"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,SACE,oBADF,EAEE,8BAFF,QAIO,WAJP;AAmBA,OAAO,MAAM,aAAa,GAAG,oBAAoB,CAAC,IAAI,KAAK;AACzD,EAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CADgD;AAEzD,EAAA,aAAa,EAAE,SAAS,CAAC,IAFgC;AAGzD,EAAA,YAAY,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,MAArB,CAH2C;AAIzD,EAAA,gBAAgB,EAAE,SAAS,CAAC,IAJ6B;AAKzD,EAAA,eAAe,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,gBAArB,CALwC;AAMzD,EAAA,iBAAiB,EAAE,SAAS,CAAC,QAAV,CAAmB,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,gBAArB,CAAnB;AANsC,CAAL,CAAL,CAA1C;AASP,OAAO,MAAM,SAAS,GAGlB,KAAK,IAAG;AACV,QAAM;AACJ,IAAA,SADI;AAEJ,IAAA,OAFI;AAGJ,IAAA,aAHI;AAIJ,IAAA,YAJI;AAKJ,IAAA,gBALI;AAMJ,IAAA,eANI;AAOJ,IAAA,iBAAiB,GAAG;AAPhB,MASF,KATJ;AAAA,QAQE,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,SAAA,EAAA,eAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,mBAAA,CAAA,CARF;;AAWA,SAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU,CACnB;AACE,2BAAqB,aADvB;AAEE,OAAC,cAAc,YAAY,EAA3B,GAAgC,YAFlC;AAGE,8BAAwB,gBAH1B;AAIE,OAAC,cAAc,eAAe,EAA9B,GAAmC,eAJrC;AAKE,MAAA;AALF,KADmB,EAQnB,GAAG,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,GAA/B,CACD,UAAU,IACR,cAAc,iBAAiB,CAAC,UAAD,CAAY,IAAI,UAAU,EAF1D,CARgB,EAYnB,SAZmB;AADvB,GAAA,EAeM,OAAO,KAAK,SAAZ,GAAwB;AAAE,oBAAgB;AAAlB,GAAxB,GAAsD,EAf5D,EAgBK,IAhBL,CAAA;AAkBD,CAjCM;AAmCP,OAAO,MAAM,uBAAuB,GAAG,8BAA8B,CACnE,aADmE,EAEnE,SAFmE,CAA9D","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory, } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n    tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    tooltipActive: PropTypes.bool,\n    tooltipColor: PropTypes.oneOf(vars.colors),\n    tooltipMultiline: PropTypes.bool,\n    tooltipPosition: PropTypes.oneOf(vars.tooltipPositions),\n    tooltipResponsive: PropTypes.objectOf(PropTypes.oneOf(vars.tooltipPositions)),\n}));\nexport const transform = props => {\n    const { className, tooltip, tooltipActive, tooltipColor, tooltipMultiline, tooltipPosition, tooltipResponsive = {} } = props, rest = tslib_1.__rest(props, [\"className\", \"tooltip\", \"tooltipActive\", \"tooltipColor\", \"tooltipMultiline\", \"tooltipPosition\", \"tooltipResponsive\"]);\n    return Object.assign({ className: classNames({\n            \"is-tooltip-active\": tooltipActive,\n            [`is-tooltip-${tooltipColor}`]: tooltipColor,\n            \"is-tooltip-multiline\": tooltipMultiline,\n            [`is-tooltip-${tooltipPosition}`]: tooltipPosition,\n            tooltip,\n        }, ...Object.keys(tooltipResponsive).map(breakpoint => `is-tooltip-${tooltipResponsive[breakpoint]}-${breakpoint}`), className) }, (tooltip !== undefined ? { \"data-tooltip\": tooltip } : {}), rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);\n//# sourceMappingURL=tooltip.js.map"]},"metadata":{},"sourceType":"module"}