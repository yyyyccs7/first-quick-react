{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { Delete } from \"../../elements\";\nimport { ModalContext } from \"./modal-context\";\n\nconst mapChildren = (children, close) => React.Children.map(children, (child, i) => {\n  if (typeof child === \"object\" && child !== null && \"type\" in child) {\n    if (child.type === Delete) {\n      const onClick = child.props.onClick;\n      return React.cloneElement(child, {\n        onClick: event => {\n          if (onClick !== undefined) {\n            onClick(event);\n          }\n\n          close();\n        }\n      });\n    } else if (child.type === React.Fragment) {\n      return React.createElement(React.Fragment, {\n        children: mapChildren(child.props.children, close)\n      });\n    }\n  }\n\n  return child;\n});\n\nexport const ModalCardHead = forwardRefAs((_a, ref) => {\n  var {\n    className,\n    children\n  } = _a,\n      rest = tslib_1.__rest(_a, [\"className\", \"children\"]);\n\n  return React.createElement(ModalContext.Consumer, null, ({\n    close\n  }) => React.createElement(Generic, Object.assign({\n    children: mapChildren(children, close),\n    className: classNames(\"modal-card-head\", className),\n    ref: ref\n  }, rest)));\n}, {\n  as: \"header\"\n});\nModalCardHead.displayName = \"Modal.Card.Head\";","map":{"version":3,"sources":["../../../src/components/modal/modal-card-head.tsx"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,YAAT,EAAuB,OAAvB,QAAsC,YAAtC;AAEA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAAS,YAAT,QAAgD,iBAAhD;;AAIA,MAAM,WAAW,GAAG,CAClB,QADkB,EAElB,KAFkB,KAIlB,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,CAAC,KAAD,EAAQ,CAAR,KAAa;AACxC,MAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,KAAK,IAAvC,IAA+C,UAAU,KAA7D,EAAoE;AAClE,QAAI,KAAK,CAAC,IAAN,KAAe,MAAnB,EAA2B;AACzB,YAAM,OAAO,GAAI,KAAK,CAAC,KAAN,CAA8C,OAA/D;AAEA,aAAO,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B;AAC/B,QAAA,OAAO,EAAG,KAAD,IAA4B;AACnC,cAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,YAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AACD,UAAA,KAAK;AACN;AAN8B,OAA1B,CAAP;AAQD,KAXD,MAWO,IAAI,KAAK,CAAC,IAAN,KAAe,KAAK,CAAC,QAAzB,EAAmC;AACxC,aACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe;AACb,QAAA,QAAQ,EAAE,WAAW,CAClB,KAAK,CAAC,KAAN,CAEE,QAHgB,EAInB,KAJmB;AADR,OAAf,CADF;AAUD;AACF;;AAED,SAAO,KAAP;AACD,CA5BD,CAJF;;AAkCA,OAAO,MAAM,aAAa,GAAG,YAAY,CACvC,CAAC,EAAD,EAAmC,GAAnC,KAA0C;MAAzC;AAAE,IAAA,SAAF;AAAa,IAAA;AAAb,MAAqB,E;MAAE,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,C;;AAAmB,SACzC,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAd,EAAsB,IAAtB,EACG,CAAC;AAAE,IAAA;AAAF,GAAD,KACC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AACN,IAAA,QAAQ,EAAE,WAAW,CAAC,QAAD,EAAW,KAAX,CADf;AAEN,IAAA,SAAS,EAAE,UAAU,CAAC,iBAAD,EAAoB,SAApB,CAFf;AAGN,IAAA,GAAG,EAAE;AAHC,GAAA,EAIF,IAJE,CAAR,CAFJ,CADyC;AAW1C,CAZsC,EAavC;AAAE,EAAA,EAAE,EAAE;AAAN,CAbuC,CAAlC;AAgBP,aAAa,CAAC,WAAd,GAA4B,iBAA5B","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { Delete } from \"../../elements\";\nimport { ModalContext } from \"./modal-context\";\nconst mapChildren = (children, close) => React.Children.map(children, (child, i) => {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n        if (child.type === Delete) {\n            const onClick = child.props.onClick;\n            return React.cloneElement(child, {\n                onClick: (event) => {\n                    if (onClick !== undefined) {\n                        onClick(event);\n                    }\n                    close();\n                },\n            });\n        }\n        else if (child.type === React.Fragment) {\n            return (React.createElement(React.Fragment, { children: mapChildren(child.props.children, close) }));\n        }\n    }\n    return child;\n});\nexport const ModalCardHead = forwardRefAs((_a, ref) => {\n    var { className, children } = _a, rest = tslib_1.__rest(_a, [\"className\", \"children\"]);\n    return (React.createElement(ModalContext.Consumer, null, ({ close }) => (React.createElement(Generic, Object.assign({ children: mapChildren(children, close), className: classNames(\"modal-card-head\", className), ref: ref }, rest)))));\n}, { as: \"header\" });\nModalCardHead.displayName = \"Modal.Card.Head\";\n//# sourceMappingURL=modal-card-head.js.map"]},"metadata":{},"sourceType":"module"}