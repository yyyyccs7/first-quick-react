{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { initialValue, ModalContext } from \"./modal-context\";\nexport class ModalPortal extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.close = () => {\n      if (this.props.onClose !== undefined) {\n        this.props.onClose();\n      }\n    };\n\n    this.handleKeydown = event => {\n      if (this.props.closeOnEsc === true && event.code === \"Escape\") {\n        this.close();\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      clipped,\n      document\n    } = this.props;\n    document.addEventListener(\"keydown\", this.handleKeydown);\n    const html = document.querySelector(\"html\");\n\n    if (html !== null) {\n      if (clipped === true) {\n        html.classList.add(\"is-clipped\");\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      document\n    } = this.props;\n    document.removeEventListener(\"keydown\", this.handleKeydown);\n    const html = document.querySelector(\"html\");\n\n    if (html !== null) {\n      html.classList.remove(\"is-clipped\");\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      closeOnBlur,\n      closeOnEsc,\n      innerRef,\n      onClose\n    } = _a,\n          rest = tslib_1.__rest(_a, [\"className\", \"closeOnBlur\", \"closeOnEsc\", \"innerRef\", \"onClose\"]);\n\n    return React.createElement(ModalContext.Provider, {\n      value: {\n        close: this.close,\n        closeOnBlur: closeOnBlur === true,\n        closeOnEsc: closeOnEsc === true\n      }\n    }, React.createElement(Generic, Object.assign({\n      className: classNames(\"modal\", \"is-active\", className),\n      ref: innerRef\n    }, rest)));\n  }\n\n}\nModalPortal.defaultProps = {\n  closeOnBlur: initialValue.closeOnBlur,\n  closeOnEsc: initialValue.closeOnEsc\n};\nModalPortal.displayName = \"Modal.Portal\";","map":{"version":3,"sources":["../../../src/components/modal/modal-portal.tsx"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,YAAT,EAAuB,YAAvB,QAA8D,iBAA9D;AAeA,OAAM,MAAO,WAAP,SAA2B,KAAK,CAAC,aAAjC,CAAgE;AAAtE,EAAA,WAAA,GAAA;;;AAwDmB,SAAA,KAAA,GAAQ,MAAK;AAC5B,UAAI,KAAK,KAAL,CAAW,OAAX,KAAuB,SAA3B,EAAsC;AACpC,aAAK,KAAL,CAAW,OAAX;AACD;AACF,KAJgB;;AAMA,SAAA,aAAA,GAAiB,KAAD,IAAyB;AACxD,UAAI,KAAK,KAAL,CAAW,UAAX,KAA0B,IAA1B,IAAkC,KAAK,CAAC,IAAN,KAAe,QAArD,EAA+D;AAC7D,aAAK,KAAL;AACD;AACF,KAJgB;AAKlB;;AA5DQ,EAAA,iBAAiB,GAAA;AACtB,UAAM;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,QAAwB,KAAK,KAAnC;AACA,IAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,KAAK,aAA1C;AACA,UAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAb;;AAEA,QAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,UAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAA,IAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,YAAnB;AACD;AACF;AACF;;AAEM,EAAA,oBAAoB,GAAA;AACzB,UAAM;AAAE,MAAA;AAAF,QAAe,KAAK,KAA1B;AACA,IAAA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,KAAK,aAA7C;AACA,UAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAb;;AAEA,QAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,MAAA,IAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,YAAtB;AACD;AACF;;AAEM,EAAA,MAAM,GAAA;AACX,UAAM,EAAA,GAAA,KAAA,KAAN;AAAA,UAAM;AACJ,MAAA,SADI;AAEJ,MAAA,WAFI;AAGJ,MAAA,UAHI;AAIJ,MAAA,QAJI;AAKJ,MAAA;AALI,QAKG,EALT;AAAA,UAME,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,WAAA,EAAA,aAAA,EAAA,YAAA,EAAA,UAAA,EAAA,SAAA,CAAA,CANF;;AASA,WACE,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAd,EAAsB;AACpB,MAAA,KAAK,EAAE;AACL,QAAA,KAAK,EAAE,KAAK,KADP;AAEL,QAAA,WAAW,EAAE,WAAW,KAAK,IAFxB;AAGL,QAAA,UAAU,EAAE,UAAU,KAAK;AAHtB;AADa,KAAtB,EAOE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AACN,MAAA,SAAS,EAAE,UAAU,CAAC,OAAD,EAAU,WAAV,EAAuB,SAAvB,CADf;AAEN,MAAA,GAAG,EAAE;AAFC,KAAA,EAGF,IAHE,CAAR,CAPF,CADF;AAeD;;AAtDmE;AACtD,WAAA,CAAA,YAAA,GAAe;AAC3B,EAAA,WAAW,EAAE,YAAY,CAAC,WADC;AAE3B,EAAA,UAAU,EAAE,YAAY,CAAC;AAFE,CAAf;AAIA,WAAA,CAAA,WAAA,GAAc,cAAd","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { initialValue, ModalContext } from \"./modal-context\";\nexport class ModalPortal extends React.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.close = () => {\n            if (this.props.onClose !== undefined) {\n                this.props.onClose();\n            }\n        };\n        this.handleKeydown = (event) => {\n            if (this.props.closeOnEsc === true && event.code === \"Escape\") {\n                this.close();\n            }\n        };\n    }\n    componentDidMount() {\n        const { clipped, document } = this.props;\n        document.addEventListener(\"keydown\", this.handleKeydown);\n        const html = document.querySelector(\"html\");\n        if (html !== null) {\n            if (clipped === true) {\n                html.classList.add(\"is-clipped\");\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { document } = this.props;\n        document.removeEventListener(\"keydown\", this.handleKeydown);\n        const html = document.querySelector(\"html\");\n        if (html !== null) {\n            html.classList.remove(\"is-clipped\");\n        }\n    }\n    render() {\n        const _a = this.props, { className, closeOnBlur, closeOnEsc, innerRef, onClose } = _a, rest = tslib_1.__rest(_a, [\"className\", \"closeOnBlur\", \"closeOnEsc\", \"innerRef\", \"onClose\"]);\n        return (React.createElement(ModalContext.Provider, { value: {\n                close: this.close,\n                closeOnBlur: closeOnBlur === true,\n                closeOnEsc: closeOnEsc === true,\n            } },\n            React.createElement(Generic, Object.assign({ className: classNames(\"modal\", \"is-active\", className), ref: innerRef }, rest))));\n    }\n}\nModalPortal.defaultProps = {\n    closeOnBlur: initialValue.closeOnBlur,\n    closeOnEsc: initialValue.closeOnEsc,\n};\nModalPortal.displayName = \"Modal.Portal\";\n//# sourceMappingURL=modal-portal.js.map"]},"metadata":{},"sourceType":"module"}