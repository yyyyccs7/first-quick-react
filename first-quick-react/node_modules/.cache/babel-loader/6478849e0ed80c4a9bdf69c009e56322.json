{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { DEFAULTS } from \"../../base/helpers/variables\";\nexport const COLUMN_GROUP_DEFAULTS = {\n  gapSizes: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n};\nexport const ColumnGroup = forwardRefAs((_a, ref) => {\n  var {\n    className,\n    breakpoint,\n    centered,\n    desktop,\n    fullhd,\n    gapless,\n    gapSize,\n    mobile,\n    multiline,\n    tablet,\n    widescreen,\n    touch,\n    vcentered\n  } = _a,\n      rest = tslib_1.__rest(_a, [\"className\", \"breakpoint\", \"centered\", \"desktop\", \"fullhd\", \"gapless\", \"gapSize\", \"mobile\", \"multiline\", \"tablet\", \"widescreen\", \"touch\", \"vcentered\"]);\n\n  const breakpoints = {\n    desktop,\n    fullhd,\n    mobile,\n    tablet,\n    touch,\n    widescreen\n  };\n  const gapSizeClassNames = classNames({\n    [`is-${gapSize}`]: typeof gapSize === \"number\"\n  }, Object.keys(breakpoints).map(key => {\n    const value = breakpoints[key];\n    return value === undefined ? {} : {\n      [`is-${value.gapSize}-${key}`]: value.gapSize !== undefined\n    };\n  }).reduce((acc, cv) => Object.assign({}, acc, cv), {}));\n  return React.createElement(Generic, Object.assign({\n    className: classNames(\"columns\", {\n      [`is-${breakpoint}`]: breakpoint,\n      \"is-centered\": centered,\n      \"is-gapless\": gapless,\n      \"is-multiline\": multiline,\n      \"is-variable \": gapSizeClassNames !== \"\",\n      \"is-vcentered\": vcentered\n    }, gapSizeClassNames, className),\n    ref: ref\n  }, rest));\n}, {\n  as: \"div\"\n});\nColumnGroup.displayName = \"Column.Group\";\nconst ColumnGroupBreakpointPropTypes = {\n  gapSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nColumnGroup.propTypes = Object.assign({}, DEFAULTS.breakpoints.map(breakpoint => ({\n  [breakpoint]: PropTypes.shape(ColumnGroupBreakpointPropTypes)\n})).reduce((acc, cv) => Object.assign({}, acc, cv), {}), ColumnGroupBreakpointPropTypes, {\n  breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  centered: PropTypes.bool,\n  gapless: PropTypes.bool,\n  multiline: PropTypes.bool,\n  vcentered: PropTypes.bool\n});","map":{"version":3,"sources":["../../../src/grid/columns/column-group.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { DEFAULTS } from \"../../base/helpers/variables\";\nexport const COLUMN_GROUP_DEFAULTS = {\n    gapSizes: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n};\nexport const ColumnGroup = forwardRefAs((_a, ref) => {\n    var { className, breakpoint, centered, desktop, fullhd, gapless, gapSize, mobile, multiline, tablet, widescreen, touch, vcentered } = _a, rest = tslib_1.__rest(_a, [\"className\", \"breakpoint\", \"centered\", \"desktop\", \"fullhd\", \"gapless\", \"gapSize\", \"mobile\", \"multiline\", \"tablet\", \"widescreen\", \"touch\", \"vcentered\"]);\n    const breakpoints = {\n        desktop,\n        fullhd,\n        mobile,\n        tablet,\n        touch,\n        widescreen,\n    };\n    const gapSizeClassNames = classNames({ [`is-${gapSize}`]: typeof gapSize === \"number\" }, Object.keys(breakpoints)\n        .map(key => {\n        const value = breakpoints[key];\n        return value === undefined\n            ? {}\n            : { [`is-${value.gapSize}-${key}`]: value.gapSize !== undefined };\n    })\n        .reduce((acc, cv) => (Object.assign({}, acc, cv)), {}));\n    return (React.createElement(Generic, Object.assign({ className: classNames(\"columns\", {\n            [`is-${breakpoint}`]: breakpoint,\n            \"is-centered\": centered,\n            \"is-gapless\": gapless,\n            \"is-multiline\": multiline,\n            \"is-variable \": gapSizeClassNames !== \"\",\n            \"is-vcentered\": vcentered,\n        }, gapSizeClassNames, className), ref: ref }, rest)));\n}, { as: \"div\" });\nColumnGroup.displayName = \"Column.Group\";\nconst ColumnGroupBreakpointPropTypes = {\n    gapSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nColumnGroup.propTypes = Object.assign({}, DEFAULTS.breakpoints\n    .map(breakpoint => ({\n    [breakpoint]: PropTypes.shape(ColumnGroupBreakpointPropTypes),\n}))\n    .reduce((acc, cv) => (Object.assign({}, acc, cv)), {}), ColumnGroupBreakpointPropTypes, { breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number]), centered: PropTypes.bool, gapless: PropTypes.bool, multiline: PropTypes.bool, vcentered: PropTypes.bool });\n//# sourceMappingURL=column-group.js.map"]},"metadata":{},"sourceType":"module"}