{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  badgeColor: PropTypes.oneOf(vars.colors),\n  badgeOutlined: PropTypes.bool,\n  badgeRounded: PropTypes.bool,\n  badgeSize: PropTypes.oneOf(vars.badgeSizes)\n}));\nexport const transform = props => {\n  const {\n    badge,\n    badgeColor,\n    badgeOutlined,\n    badgeRounded,\n    badgeSize,\n    className\n  } = props,\n        rest = tslib_1.__rest(props, [\"badge\", \"badgeColor\", \"badgeOutlined\", \"badgeRounded\", \"badgeSize\", \"className\"]);\n\n  return Object.assign({\n    className: classNames({\n      badge,\n      [`has-badge-${badgeColor}`]: badgeColor,\n      \"has-badge-outlined\": badgeOutlined,\n      \"has-badge-rounded\": badgeRounded,\n      [`has-badge-${badgeSize}`]: badgeSize\n    }, className)\n  }, badge !== undefined ? {\n    \"data-badge\": badge\n  } : {}, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":{"version":3,"sources":["../../../src/base/helpers/badge.ts"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,SAEE,oBAFF,EAGE,8BAHF,QAIO,WAJP;AAgBA,OAAO,MAAM,aAAa,GAAG,oBAAoB,CAAC,IAAI,KAAK;AACzD,EAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CADkD;AAEzD,EAAA,UAAU,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,MAArB,CAF6C;AAGzD,EAAA,aAAa,EAAE,SAAS,CAAC,IAHgC;AAIzD,EAAA,YAAY,EAAE,SAAS,CAAC,IAJiC;AAKzD,EAAA,SAAS,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,UAArB;AAL8C,CAAL,CAAL,CAA1C;AAQP,OAAO,MAAM,SAAS,GAGlB,KAAK,IAAG;AACV,QAAM;AACJ,IAAA,KADI;AAEJ,IAAA,UAFI;AAGJ,IAAA,aAHI;AAIJ,IAAA,YAJI;AAKJ,IAAA,SALI;AAMJ,IAAA;AANI,MAQF,KARJ;AAAA,QAOE,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,YAAA,EAAA,eAAA,EAAA,cAAA,EAAA,WAAA,EAAA,WAAA,CAAA,CAPF;;AAUA,SAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU,CACnB;AACE,MAAA,KADF;AAEE,OAAC,aAAa,UAAU,EAAxB,GAA6B,UAF/B;AAGE,4BAAsB,aAHxB;AAIE,2BAAqB,YAJvB;AAKE,OAAC,aAAa,SAAS,EAAvB,GAA4B;AAL9B,KADmB,EAQnB,SARmB;AADvB,GAAA,EAWM,KAAK,KAAK,SAAV,GAAsB;AAAE,kBAAc;AAAhB,GAAtB,GAAgD,EAXtD,EAYK,IAZL,CAAA;AAcD,CA5BM;AA8BP,OAAO,MAAM,uBAAuB,GAAG,8BAA8B,CACnE,aADmE,EAEnE,SAFmE,CAA9D","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory, } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n    badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    badgeColor: PropTypes.oneOf(vars.colors),\n    badgeOutlined: PropTypes.bool,\n    badgeRounded: PropTypes.bool,\n    badgeSize: PropTypes.oneOf(vars.badgeSizes),\n}));\nexport const transform = props => {\n    const { badge, badgeColor, badgeOutlined, badgeRounded, badgeSize, className } = props, rest = tslib_1.__rest(props, [\"badge\", \"badgeColor\", \"badgeOutlined\", \"badgeRounded\", \"badgeSize\", \"className\"]);\n    return Object.assign({ className: classNames({\n            badge,\n            [`has-badge-${badgeColor}`]: badgeColor,\n            \"has-badge-outlined\": badgeOutlined,\n            \"has-badge-rounded\": badgeRounded,\n            [`has-badge-${badgeSize}`]: badgeSize,\n        }, className) }, (badge !== undefined ? { \"data-badge\": badge } : {}), rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);\n//# sourceMappingURL=badge.js.map"]},"metadata":{},"sourceType":"module"}