{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { FieldBody } from \"./field-body\";\nimport { FieldLabel } from \"./field-label\";\nexport const FIELD_DEFAULTS = {\n  alignments: [\"centered\", \"right\"],\n  kinds: [\"addons\", \"group\"]\n};\nexport const Field = Object.assign(forwardRefAs((props, ref) => {\n  const {\n    align,\n    expanded,\n    horizontal,\n    kind,\n    multiline,\n    narrow\n  } = props,\n        rest = tslib_1.__rest(props, [\"align\", \"expanded\", \"horizontal\", \"kind\", \"multiline\", \"narrow\"]);\n\n  let k;\n\n  if (kind === \"addons\") {\n    k = \"has-addons\";\n  } else if (kind === \"group\") {\n    k = \"is-grouped\";\n  }\n\n  rest.className = classNames(\"field\", {\n    [`${k}`]: k,\n    [`${k}-${align}`]: k !== undefined && align !== undefined,\n    [`${k}-multiline`]: k === \"is-grouped\" && multiline === true,\n    \"is-expanded\": expanded,\n    \"is-horizontal\": horizontal,\n    \"is-narrow\": narrow\n  }, rest.className);\n  return React.createElement(Generic, Object.assign({\n    ref: ref\n  }, rest));\n}, {\n  as: \"div\"\n}), {\n  Body: FieldBody,\n  Label: FieldLabel\n});\nField.displayName = \"Field\";\nField.propTypes = {\n  align: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  expanded: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  kind: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  multiline: PropTypes.bool,\n  narrow: PropTypes.bool\n};","map":{"version":3,"sources":["../../../src/elements/form/field.tsx"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,YAAT,EAAuB,OAAvB,QAAsC,YAAtC;AAGA,SAAS,SAAT,QAA0B,cAA1B;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAM,cAAc,GAAG;AAC5B,EAAA,UAAU,EAAE,CAAC,UAAD,EAAa,OAAb,CADgB;AAE5B,EAAA,KAAK,EAAE,CAAC,QAAD,EAAW,OAAX;AAFqB,CAAvB;AA4BP,OAAO,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CACnB,YAAY,CACV,CAAC,KAAD,EAAQ,GAAR,KAAe;AACb,QAAM;AACJ,IAAA,KADI;AAEJ,IAAA,QAFI;AAGJ,IAAA,UAHI;AAIJ,IAAA,IAJI;AAKJ,IAAA,SALI;AAMJ,IAAA;AANI,MAQF,KARJ;AAAA,QAOE,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,YAAA,EAAA,MAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CAPF;;AAUA,MAAI,CAAJ;;AACA,MAAI,IAAI,KAAK,QAAb,EAAuB;AACrB,IAAA,CAAC,GAAG,YAAJ;AACD,GAFD,MAEO,IAAI,IAAI,KAAK,OAAb,EAAsB;AAC3B,IAAA,CAAC,GAAG,YAAJ;AACD;;AAED,EAAA,IAAI,CAAC,SAAL,GAAiB,UAAU,CACzB,OADyB,EAEzB;AACE,KAAC,GAAG,CAAC,EAAL,GAAU,CADZ;AAEE,KAAC,GAAG,CAAC,IAAI,KAAK,EAAd,GAAmB,CAAC,KAAK,SAAN,IAAmB,KAAK,KAAK,SAFlD;AAGE,KAAC,GAAG,CAAC,YAAL,GAAoB,CAAC,KAAK,YAAN,IAAsB,SAAS,KAAK,IAH1D;AAIE,mBAAe,QAJjB;AAKE,qBAAiB,UALnB;AAME,iBAAa;AANf,GAFyB,EAUzB,IAAI,CAAC,SAVoB,CAA3B;AAaA,SAAO,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,GAAG,EAAE;AAAN,GAAA,EAAe,IAAf,CAAR,CAAP;AACD,CAjCS,EAkCV;AAAE,EAAA,EAAE,EAAE;AAAN,CAlCU,CADO,EAqCnB;AACE,EAAA,IAAI,EAAE,SADR;AAEE,EAAA,KAAK,EAAE;AAFT,CArCmB,CAAd;AA2CP,KAAK,CAAC,WAAN,GAAoB,OAApB;AACA,KAAK,CAAC,SAAN,GAAkB;AAChB,EAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CADS;AAEhB,EAAA,QAAQ,EAAE,SAAS,CAAC,IAFJ;AAGhB,EAAA,UAAU,EAAE,SAAS,CAAC,IAHN;AAIhB,EAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CAJU;AAKhB,EAAA,SAAS,EAAE,SAAS,CAAC,IALL;AAMhB,EAAA,MAAM,EAAE,SAAS,CAAC;AANF,CAAlB","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { FieldBody } from \"./field-body\";\nimport { FieldLabel } from \"./field-label\";\nexport const FIELD_DEFAULTS = {\n    alignments: [\"centered\", \"right\"],\n    kinds: [\"addons\", \"group\"],\n};\nexport const Field = Object.assign(forwardRefAs((props, ref) => {\n    const { align, expanded, horizontal, kind, multiline, narrow } = props, rest = tslib_1.__rest(props, [\"align\", \"expanded\", \"horizontal\", \"kind\", \"multiline\", \"narrow\"]);\n    let k;\n    if (kind === \"addons\") {\n        k = \"has-addons\";\n    }\n    else if (kind === \"group\") {\n        k = \"is-grouped\";\n    }\n    rest.className = classNames(\"field\", {\n        [`${k}`]: k,\n        [`${k}-${align}`]: k !== undefined && align !== undefined,\n        [`${k}-multiline`]: k === \"is-grouped\" && multiline === true,\n        \"is-expanded\": expanded,\n        \"is-horizontal\": horizontal,\n        \"is-narrow\": narrow,\n    }, rest.className);\n    return React.createElement(Generic, Object.assign({ ref: ref }, rest));\n}, { as: \"div\" }), {\n    Body: FieldBody,\n    Label: FieldLabel,\n});\nField.displayName = \"Field\";\nField.propTypes = {\n    align: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    expanded: PropTypes.bool,\n    horizontal: PropTypes.bool,\n    kind: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    multiline: PropTypes.bool,\n    narrow: PropTypes.bool,\n};\n//# sourceMappingURL=field.js.map"]},"metadata":{},"sourceType":"module"}