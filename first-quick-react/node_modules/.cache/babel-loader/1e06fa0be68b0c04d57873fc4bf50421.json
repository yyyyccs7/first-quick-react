{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { combineRefs } from \"../../utils\";\nimport { NavbarItemContext } from \"./navbar-item-context\";\nexport class NavbarItemContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n\n    this.handleDocumentClick = event => {\n      if (this.props.managed !== true && this.active && this.ref.current !== null) {\n        if (event.target instanceof Element && !this.ref.current.contains(event.target)) {\n          this.active = false;\n        }\n      }\n    };\n\n    this.handleOnClick = ctx => event => {\n      if (this.props.onClick !== undefined) {\n        this.props.onClick(event);\n      }\n\n      ctx.setActive(!ctx.active);\n    };\n\n    this.state = {\n      active: props.active === true\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.dropdown === true) {\n      document.addEventListener(\"click\", this.handleDocumentClick);\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"click\", this.handleDocumentClick);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      as,\n      active,\n      className: initialClassName,\n      dropdown,\n      expanded,\n      hoverable,\n      innerRef,\n      managed,\n      onClick,\n      tab,\n      up\n    } = _a,\n          rest = tslib_1.__rest(_a, [\"as\", \"active\", \"className\", \"dropdown\", \"expanded\", \"hoverable\", \"innerRef\", \"managed\", \"onClick\", \"tab\", \"up\"]);\n\n    const className = classNames(\"navbar-item\", {\n      \"has-dropdown\": dropdown,\n      \"has-dropdown-up\": up,\n      \"is-active\": this.active,\n      \"is-expanded\": expanded,\n      \"is-hoverable\": hoverable,\n      \"is-tab\": tab\n    }, initialClassName);\n    const ref = combineRefs(this.ref, innerRef);\n\n    if (dropdown === true) {\n      const asOverride = as === \"a\" ? \"div\" : as;\n      return React.createElement(NavbarItemContext.Provider, {\n        value: {\n          active: this.active,\n          setActive: value => this.active = value\n        }\n      }, React.createElement(Generic, Object.assign({\n        as: asOverride,\n        className: className,\n        ref: ref\n      }, rest)));\n    }\n\n    return React.createElement(NavbarItemContext.Consumer, null, ctx => React.createElement(Generic, Object.assign({\n      as: as,\n      className: className,\n      onClick: this.handleOnClick(ctx),\n      ref: ref\n    }, rest)));\n  }\n\n  get active() {\n    return this.props.managed === true ? this.props.active === true : this.state.active;\n  }\n\n  set active(value) {\n    if (this.props.managed !== true) {\n      this.setState({\n        active: value\n      });\n    }\n  }\n\n}\nNavbarItemContainer.displayName = \"Navbar.Item.Container\";","map":{"version":3,"sources":["../../../src/components/navbar/navbar-item-container.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { combineRefs } from \"../../utils\";\nimport { NavbarItemContext, } from \"./navbar-item-context\";\nexport class NavbarItemContainer extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.handleDocumentClick = (event) => {\n            if (this.props.managed !== true &&\n                this.active &&\n                this.ref.current !== null) {\n                if (event.target instanceof Element &&\n                    !this.ref.current.contains(event.target)) {\n                    this.active = false;\n                }\n            }\n        };\n        this.handleOnClick = (ctx) => (event) => {\n            if (this.props.onClick !== undefined) {\n                this.props.onClick(event);\n            }\n            ctx.setActive(!ctx.active);\n        };\n        this.state = { active: props.active === true };\n    }\n    componentDidMount() {\n        if (this.props.dropdown === true) {\n            document.addEventListener(\"click\", this.handleDocumentClick);\n        }\n    }\n    componentWillUnmount() {\n        document.removeEventListener(\"click\", this.handleDocumentClick);\n    }\n    render() {\n        const _a = this.props, { as, active, className: initialClassName, dropdown, expanded, hoverable, innerRef, managed, onClick, tab, up } = _a, rest = tslib_1.__rest(_a, [\"as\", \"active\", \"className\", \"dropdown\", \"expanded\", \"hoverable\", \"innerRef\", \"managed\", \"onClick\", \"tab\", \"up\"]);\n        const className = classNames(\"navbar-item\", {\n            \"has-dropdown\": dropdown,\n            \"has-dropdown-up\": up,\n            \"is-active\": this.active,\n            \"is-expanded\": expanded,\n            \"is-hoverable\": hoverable,\n            \"is-tab\": tab,\n        }, initialClassName);\n        const ref = combineRefs(this.ref, innerRef);\n        if (dropdown === true) {\n            const asOverride = as === \"a\" ? \"div\" : as;\n            return (React.createElement(NavbarItemContext.Provider, { value: {\n                    active: this.active,\n                    setActive: (value) => (this.active = value),\n                } },\n                React.createElement(Generic, Object.assign({ as: asOverride, className: className, ref: ref }, rest))));\n        }\n        return (React.createElement(NavbarItemContext.Consumer, null, ctx => (React.createElement(Generic, Object.assign({ as: as, className: className, onClick: this.handleOnClick(ctx), ref: ref }, rest)))));\n    }\n    get active() {\n        return this.props.managed === true\n            ? this.props.active === true\n            : this.state.active;\n    }\n    set active(value) {\n        if (this.props.managed !== true) {\n            this.setState({ active: value });\n        }\n    }\n}\nNavbarItemContainer.displayName = \"Navbar.Item.Container\";\n//# sourceMappingURL=navbar-item-container.js.map"]},"metadata":{},"sourceType":"module"}