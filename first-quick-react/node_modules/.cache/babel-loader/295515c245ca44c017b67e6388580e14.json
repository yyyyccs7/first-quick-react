{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  hidden: PropTypes.bool,\n  invisible: PropTypes.bool,\n  srOnly: PropTypes.bool\n}));\nexport const transform = props => {\n  const {\n    className,\n    hidden,\n    invisible,\n    srOnly\n  } = props,\n        rest = tslib_1.__rest(props, [\"className\", \"hidden\", \"invisible\", \"srOnly\"]);\n\n  return Object.assign({\n    className: classNames({\n      \"is-hidden\": hidden,\n      \"is-invisible\": invisible,\n      \"is-sr-only\": srOnly\n    }, className)\n  }, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":{"version":3,"sources":["../../../src/base/helpers/visibility.ts"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,SACE,oBADF,EAEE,8BAFF,QAIO,WAJP;AAmBA,OAAO,MAAM,aAAa,GAAG,oBAAoB,CAAC,IAAI,KAAK;AACzD,EAAA,MAAM,EAAE,SAAS,CAAC,IADuC;AAEzD,EAAA,SAAS,EAAE,SAAS,CAAC,IAFoC;AAGzD,EAAA,MAAM,EAAE,SAAS,CAAC;AAHuC,CAAL,CAAL,CAA1C;AAMP,OAAO,MAAM,SAAS,GAA8C,KAAK,IAAG;AAC1E,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA,MAAb;AAAqB,IAAA,SAArB;AAAgC,IAAA;AAAhC,MAAoD,KAA1D;AAAA,QAA8C,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,QAAA,CAAA,CAA9C;;AAEA,SAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU,CACnB;AACE,mBAAa,MADf;AAEE,sBAAgB,SAFlB;AAGE,oBAAc;AAHhB,KADmB,EAMnB,SANmB;AADvB,GAAA,EASK,IATL,CAAA;AAWD,CAdM;AAgBP,OAAO,MAAM,uBAAuB,GAAG,8BAA8B,CACnE,aADmE,EAEnE,SAFmE,CAA9D","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory, } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n    hidden: PropTypes.bool,\n    invisible: PropTypes.bool,\n    srOnly: PropTypes.bool,\n}));\nexport const transform = props => {\n    const { className, hidden, invisible, srOnly } = props, rest = tslib_1.__rest(props, [\"className\", \"hidden\", \"invisible\", \"srOnly\"]);\n    return Object.assign({ className: classNames({\n            \"is-hidden\": hidden,\n            \"is-invisible\": invisible,\n            \"is-sr-only\": srOnly,\n        }, className) }, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);\n//# sourceMappingURL=visibility.js.map"]},"metadata":{},"sourceType":"module"}