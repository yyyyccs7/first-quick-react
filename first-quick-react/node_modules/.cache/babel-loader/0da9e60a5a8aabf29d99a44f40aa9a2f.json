{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nexport const IMAGE_CONTAINER_DEFAULTS = {\n  dimmensions: [16, 24, 32, 48, 64, 96, 128],\n  ratios: [\"16by9\", \"1by1\", \"1by2\", \"1by3\", \"2by1\", \"2by3\", \"3by1\", \"3by2\", \"3by4\", \"3by5\", \"4by3\", \"4by5\", \"5by3\", \"5by4\", \"9by16\", \"square\"]\n};\n\nconst mapImageContainerChildren = (children, size) => {\n  if (typeof size !== \"string\") {\n    return children;\n  }\n\n  return React.Children.map(children, (child, i) => {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n      if (child.type !== React.Fragment) {\n        return React.cloneElement(child, {\n          className: classNames(\"has-ratio\", child.props.className)\n        });\n      } else {\n        const fragmentMapped = mapImageContainerChildren(child.props.children, size);\n        return React.createElement(React.Fragment, {\n          children: fragmentMapped\n        });\n      }\n    }\n\n    return child;\n  });\n};\n\nexport const ImageContainer = forwardRefAs((_a, ref) => {\n  var {\n    children,\n    className,\n    size\n  } = _a,\n      rest = tslib_1.__rest(_a, [\"children\", \"className\", \"size\"]);\n\n  let s;\n\n  if (typeof size === \"string\") {\n    s = size;\n  } else if (typeof size === \"number\") {\n    s = `${size}x${size}`;\n  }\n\n  return React.createElement(Generic, Object.assign({\n    children: mapImageContainerChildren(children, size),\n    className: classNames(\"image\", {\n      [`is-${s}`]: s\n    }, className),\n    ref: ref\n  }, rest));\n}, {\n  as: \"figure\"\n});\nImageContainer.displayName = \"Image.Container\";\nImageContainer.propTypes = {\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};","map":{"version":3,"sources":["../../../src/elements/image/image-container.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nexport const IMAGE_CONTAINER_DEFAULTS = {\n    dimmensions: [16, 24, 32, 48, 64, 96, 128],\n    ratios: [\n        \"16by9\",\n        \"1by1\",\n        \"1by2\",\n        \"1by3\",\n        \"2by1\",\n        \"2by3\",\n        \"3by1\",\n        \"3by2\",\n        \"3by4\",\n        \"3by5\",\n        \"4by3\",\n        \"4by5\",\n        \"5by3\",\n        \"5by4\",\n        \"9by16\",\n        \"square\",\n    ],\n};\nconst mapImageContainerChildren = (children, size) => {\n    if (typeof size !== \"string\") {\n        return children;\n    }\n    return React.Children.map(children, (child, i) => {\n        if (typeof child === \"object\" && child !== null && \"type\" in child) {\n            if (child.type !== React.Fragment) {\n                return React.cloneElement(child, {\n                    className: classNames(\"has-ratio\", child.props.className),\n                });\n            }\n            else {\n                const fragmentMapped = mapImageContainerChildren(child.props\n                    .children, size);\n                return React.createElement(React.Fragment, { children: fragmentMapped });\n            }\n        }\n        return child;\n    });\n};\nexport const ImageContainer = forwardRefAs((_a, ref) => {\n    var { children, className, size } = _a, rest = tslib_1.__rest(_a, [\"children\", \"className\", \"size\"]);\n    let s;\n    if (typeof size === \"string\") {\n        s = size;\n    }\n    else if (typeof size === \"number\") {\n        s = `${size}x${size}`;\n    }\n    return (React.createElement(Generic, Object.assign({ children: mapImageContainerChildren(children, size), className: classNames(\"image\", { [`is-${s}`]: s }, className), ref: ref }, rest)));\n}, { as: \"figure\" });\nImageContainer.displayName = \"Image.Container\";\nImageContainer.propTypes = {\n    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n//# sourceMappingURL=image-container.js.map"]},"metadata":{},"sourceType":"module"}