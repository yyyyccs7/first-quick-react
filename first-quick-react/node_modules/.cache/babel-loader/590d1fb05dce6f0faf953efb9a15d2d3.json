{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { Delete } from \"../../elements\";\nimport { ModalContext } from \"./modal-context\";\n\nvar mapChildren = function mapChildren(children, close) {\n  return React.Children.map(children, function (child, i) {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n      if (child.type === Delete) {\n        var _onClick = child.props.onClick;\n        return React.cloneElement(child, {\n          onClick: function onClick(event) {\n            if (_onClick !== undefined) {\n              _onClick(event);\n            }\n\n            close();\n          }\n        });\n      } else if (child.type === React.Fragment) {\n        return React.createElement(React.Fragment, {\n          children: mapChildren(child.props.children, close)\n        });\n      }\n    }\n\n    return child;\n  });\n};\n\nexport var ModalCardHead = forwardRefAs(function (_a, ref) {\n  var className = _a.className,\n      children = _a.children,\n      rest = tslib_1.__rest(_a, [\"className\", \"children\"]);\n\n  return React.createElement(ModalContext.Consumer, null, function (_ref) {\n    var close = _ref.close;\n    return React.createElement(Generic, Object.assign({\n      children: mapChildren(children, close),\n      className: classNames(\"modal-card-head\", className),\n      ref: ref\n    }, rest));\n  });\n}, {\n  as: \"header\"\n});\nModalCardHead.displayName = \"Modal.Card.Head\";","map":{"version":3,"sources":["../../../src/components/modal/modal-card-head.tsx"],"names":[],"mappings":";AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,YAAT,EAAuB,OAAvB,QAAsC,YAAtC;AAEA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAAS,YAAT,QAAgD,iBAAhD;;AAIA,IAAM,WAAW,GAAG,SAAd,WAAc,CAClB,QADkB,EAElB,KAFkB;AAAA,SAIlB,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,UAAC,KAAD,EAAQ,CAAR,EAAa;AACxC,QAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,KAAK,IAAvC,IAA+C,UAAU,KAA7D,EAAoE;AAClE,UAAI,KAAK,CAAC,IAAN,KAAe,MAAnB,EAA2B;AACzB,YAAM,QAAO,GAAI,KAAK,CAAC,KAAN,CAA8C,OAA/D;AAEA,eAAO,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B;AAC/B,UAAA,OAAO,EAAE,iBAAC,KAAD,EAA4B;AACnC,gBAAI,QAAO,KAAK,SAAhB,EAA2B;AACzB,cAAA,QAAO,CAAC,KAAD,CAAP;AACD;;AACD,YAAA,KAAK;AACN;AAN8B,SAA1B,CAAP;AAQD,OAXD,MAWO,IAAI,KAAK,CAAC,IAAN,KAAe,KAAK,CAAC,QAAzB,EAAmC;AACxC,eACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe;AACb,UAAA,QAAQ,EAAE,WAAW,CAClB,KAAK,CAAC,KAAN,CAEE,QAHgB,EAInB,KAJmB;AADR,SAAf,CADF;AAUD;AACF;;AAED,WAAO,KAAP;AACD,GA5BD,CAJkB;AAAA,CAApB;;AAkCA,OAAO,IAAM,aAAa,GAAG,YAAY,CACvC,UAAC,EAAD,EAAmC,GAAnC,EAA0C;AAAA,MAAvC,SAAuC,GAApB,EAAoB,CAAvC,SAAuC;AAAA,MAA5B,QAA4B,GAApB,EAAoB,CAA5B,QAA4B;AAAA,MAAlB,IAAkB,GAAlB,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,CAAkB;;AAAC,SACzC,KAAA,CAAA,aAAA,CAAC,YAAY,CAAC,QAAd,EAAsB,IAAtB,EACG;AAAA,QAAG,KAAH,QAAG,KAAH;AAAA,WACC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AACN,MAAA,QAAQ,EAAE,WAAW,CAAC,QAAD,EAAW,KAAX,CADf;AAEN,MAAA,SAAS,EAAE,UAAU,CAAC,iBAAD,EAAoB,SAApB,CAFf;AAGN,MAAA,GAAG,EAAE;AAHC,KAAA,EAIF,IAJE,CAAR,CADD;AAAA,GADH,CADyC;AAW1C,CAZsC,EAavC;AAAE,EAAA,EAAE,EAAE;AAAN,CAbuC,CAAlC;AAgBP,aAAa,CAAC,WAAd,GAA4B,iBAA5B","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { Delete } from \"../../elements\";\nimport { ModalContext } from \"./modal-context\";\nconst mapChildren = (children, close) => React.Children.map(children, (child, i) => {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n        if (child.type === Delete) {\n            const onClick = child.props.onClick;\n            return React.cloneElement(child, {\n                onClick: (event) => {\n                    if (onClick !== undefined) {\n                        onClick(event);\n                    }\n                    close();\n                },\n            });\n        }\n        else if (child.type === React.Fragment) {\n            return (React.createElement(React.Fragment, { children: mapChildren(child.props.children, close) }));\n        }\n    }\n    return child;\n});\nexport const ModalCardHead = forwardRefAs((_a, ref) => {\n    var { className, children } = _a, rest = tslib_1.__rest(_a, [\"className\", \"children\"]);\n    return (React.createElement(ModalContext.Consumer, null, ({ close }) => (React.createElement(Generic, Object.assign({ children: mapChildren(children, close), className: classNames(\"modal-card-head\", className), ref: ref }, rest)))));\n}, { as: \"header\" });\nModalCardHead.displayName = \"Modal.Card.Head\";\n//# sourceMappingURL=modal-card-head.js.map"]},"metadata":{},"sourceType":"module"}